package expenses

import (
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
)

type ExpenseHandler struct {
	service ExpenseService
}

func NewExpenseHandler(service ExpenseService) *ExpenseHandler {
	return &ExpenseHandler{service: service}
}

func (h *ExpenseHandler) CalculateExpense(c *gin.Context) {
	var input Expense
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid input"})
		return
	}

	userID := c.GetInt("user_id") // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º user_id –∫–∞–∫ int
	if userID == 0 {
		log.Println("‚ùå –û—à–∏–±–∫–∞: user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω 0")
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid user_id"})
		return
	}

	log.Println("üìå user_id:", userID)
	log.Println("üìå –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", input)

	result, err := h.service.CalculateAndSave(userID, input)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to save expenses"})
		return
	}

	c.JSON(http.StatusOK, result)
}
