package middleware

import (
	"UMS/utils"
	"log"
	"net/http"
	"strings"

	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
)

func AuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		authHeader := c.GetHeader("Authorization")
		log.Println("üìå Authorization Header:", authHeader) // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è

		if authHeader == "" {
			log.Println("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
			c.JSON(http.StatusUnauthorized, gin.H{"error": "authorization not found"})
			c.Abort()
			return
		}

		parts := strings.Split(authHeader, " ")
		if len(parts) != 2 || parts[0] != "Bearer" {
			log.Println("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
			c.JSON(http.StatusUnauthorized, gin.H{"error": "invalid format token"})
			c.Abort()
			return
		}

		claims, err := utils.ValidateToken(parts[1])
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω -", err)
			c.JSON(http.StatusUnauthorized, gin.H{"error": "invalid token"})
			c.Abort()
			return
		}

		log.Println("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: user_id =", claims.UserID, "role =", claims.Role)
		c.Set("user_id", claims.UserID)
		c.Set("role", claims.Role)

		c.Next()
	}
}

func AdminMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		role, exists := c.Get("role")
		if !exists || role != "admin" {
			c.JSON(http.StatusForbidden, gin.H{"error": "role must be admin"})
			c.Abort()
			return
		}
		c.Next()
	}
}

func CORSMiddleware() gin.HandlerFunc {
	return cors.New(cors.Config{
		AllowAllOrigins:  true,          // –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –¥–æ–º–µ–Ω—ã
		AllowMethods:     []string{"*"}, // –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –º–µ—Ç–æ–¥—ã
		AllowHeaders:     []string{"*"}, // –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	})
}
