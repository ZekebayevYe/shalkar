package main

import (
	"UMS/config"
	"UMS/internal/auth"
	"UMS/internal/document"
	"UMS/middleware"
	"log"
	"os"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/gin-contrib/cors"
)

func main() {
	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
	log.Println("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
	config.ConnectDB()
	db := config.DB

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
	authRepo := auth.NewAuthRepository(db)
	authService := auth.NewAuthService(authRepo)
	authHandler := auth.NewAuthHandler(authService)

	fileRepo := document.NewFileRepository(db)
	fileService := document.NewFileService(fileRepo)
	fileHandler := document.NewFileHandler(fileService)

	// –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
	r := gin.Default()

	// üî• CORS Middleware (—Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç—É - —É–∫–∞–∂–∏ –µ–≥–æ)
	r.Use(cors.New(cors.Config{
		AllowAllOrigins:  true, // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE"},
		AllowHeaders:     []string{"Content-Type", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	r.Use(gin.Logger())  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
	r.Use(gin.Recovery()) // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫

	// üîë –†–æ—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	authRoutes := r.Group("/auth")
	{
		authRoutes.POST("/register", authHandler.Register)
		authRoutes.POST("/login", authHandler.Login)
	}

	// üîí –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã (JWT)
	protectedRoutes := r.Group("/api")
	protectedRoutes.Use(middleware.AuthMiddleware())
	{
		// ‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		protectedRoutes.GET("/profile", func(c *gin.Context) {
			c.JSON(200, gin.H{"message": "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!"})
		})
		protectedRoutes.GET("/files", fileHandler.ListFiles)
		protectedRoutes.GET("/download/:id", fileHandler.DownloadFile)

		// üîê –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
		adminRoutes := protectedRoutes.Group("/")
		adminRoutes.Use(middleware.AdminMiddleware())
		{
			adminRoutes.POST("/upload", fileHandler.UploadFile)
			adminRoutes.DELETE("/files/:id", fileHandler.DeleteFile)
		}
	}

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	port := os.Getenv("PORT")
	if port == "" {
		port = "8081"
	}

	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:%s", port)
	if err := r.Run(":" + port); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
