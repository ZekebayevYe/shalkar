// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "UMS/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepositoryInterface is a mock of AuthRepositoryInterface interface.
type MockAuthRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryInterfaceMockRecorder
}

// MockAuthRepositoryInterfaceMockRecorder is the mock recorder for MockAuthRepositoryInterface.
type MockAuthRepositoryInterfaceMockRecorder struct {
	mock *MockAuthRepositoryInterface
}

// NewMockAuthRepositoryInterface creates a new mock instance.
func NewMockAuthRepositoryInterface(ctrl *gomock.Controller) *MockAuthRepositoryInterface {
	mock := &MockAuthRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepositoryInterface) EXPECT() *MockAuthRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthRepositoryInterface) CreateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepositoryInterfaceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepositoryInterface)(nil).CreateUser), user)
}

// FindByUsername mocks base method.
func (m *MockAuthRepositoryInterface) FindByUsername(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockAuthRepositoryInterfaceMockRecorder) FindByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockAuthRepositoryInterface)(nil).FindByUsername), username)
}
