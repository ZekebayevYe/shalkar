package issue

import (
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
)

type IssueController struct {
	Service IssueService
}

// –°–æ–∑–¥–∞–Ω–∏–µ Issue
func (c *IssueController) CreateIssue(ctx *gin.Context) {
	var issue Issue

	// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
	if err := ctx.ShouldBindJSON(&issue); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid input"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ user_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–∏–∑ middleware)
	userID, exists := ctx.Get("user_id")
	if exists {
		// –ï—Å–ª–∏ user_id –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
		log.Println("‚úÖ user_id –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:", userID)
		issue.UserID = userID.(int)
	} else {
		// –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç user_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ JSON
		if issue.UserID == 0 {
			log.Println("‚ùå –û—à–∏–±–∫–∞: user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –≤ –∑–∞–ø—Ä–æ—Å–µ")
			ctx.JSON(http.StatusUnauthorized, gin.H{"error": "User ID not found"})
			return
		}
		log.Println("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ JSON:", issue.UserID)
	}

	// üöÄ –õ–æ–≥ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
	log.Println("üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º issue:", issue)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Ä–≤–∏—Å–µ
	id, err := c.Service.CreateIssue(issue)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è issue:", err)
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create issue"})
		return
	}

	log.Println("‚úÖ Issue —Å–æ–∑–¥–∞–Ω —Å ID:", id)
	ctx.JSON(http.StatusCreated, gin.H{"message": "Issue created successfully", "id": id})
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö Issue
func (c *IssueController) GetIssues(ctx *gin.Context) {
	issues, err := c.Service.GetAllIssues()
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch issues"})
		return
	}

	ctx.JSON(http.StatusOK, issues)
}
